Express, Mongo and Node are all setup and working.
All REST routes have been setup and are working.
Basic styling has been added for our standard campground Model.

Errors:   
To handle errors we implemented a utilities file which has the catchAsync and ExpressError files.
Review the files in the Express_Errors_CODE for a refresh on how these 2 error handling techinques work.
We catch any errors and pass them to the next() error handler to be resolved.
These steps required the app.all call and app.use(primary error handling) call.

Validation:
We used bootstrap features to implement user side validation on the forms.  Forms will not allow to submit until
filled out and turn green and red to indicate what needs to happen.
For the server side validation, we are using Joi.  With Joi we can create a Schema and validate prior to mongoose
handling and trying to send to the db.  We created a function that we can run as middleware.
The validateCampground middleware will confirm validations and throw an error if something is wrong. 

Review Model Implementation:
We need to build a model for our Reviews so we can store this data in the DB.
Built the reivew schema and added an array of ObjectId's to the campground model so we can link reviews to a campground.
See notes in the app.post('/campgrounds/:id/reviews', catchAsync(async(req, res) route on finalizing this build.
Used bootstrap for UI validation and Joi for server-side validation.
Made it so we can delete comments.
Now if a campground is deleted, we need to delete all reviews associated with it which requires Mongoose middleware.
 We implement this middleware with the campground schema file. 

Express Router:
Refactored all routes with express.Router.  We needed to pass in an option of mergeParams in order to have access to req.params.
mergeParams is needed because of the way Router handles Params.

